name: CI Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Test Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-build.txt
    
    - name: Install Windows-specific dependencies
      if: matrix.os == 'windows-latest'
      run: pip install windows-curses
    
    - name: Verify main.py exists and is valid Python
      run: python -m py_compile main.py
    
    - name: Test build with PyInstaller
      run: |
        pyinstaller ageticker.spec
        echo "âœ… Build completed successfully on ${{ matrix.os }}"
    
    - name: Test executable basic functionality
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Test Windows executable
          ./dist/AgeTicker.exe --help
          echo "âœ… Windows executable working"
        else
          # Test Unix executable
          ./dist/AgeTicker --help
          echo "âœ… Unix executable working"
        fi
    
    - name: Clean build artifacts
      shell: bash
      run: |
        rm -rf build dist *.spec~ || true
        echo "ðŸ§¹ Cleaned up build artifacts"
